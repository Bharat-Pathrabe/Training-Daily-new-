################################## Getting Started With Python

print("Hello, World!")


################################## Syntaxing(Indentation)

if 5 > 2:
	print("Five is greater than two!") 
if 5 > 2:
	        print("Five is greater than two!") 
	        
################################## Commments


#This is a comment
#written in
#more than just one line (using single comment #)
print("Hello, World!")	        

################

"""
This is a comment
written in
more than just one line (you can add a multiline string triple quotes in your code)
"""
print("Hello, World!")


################################## Varribles 

x = str(3)    # x will be '3'
y = int(3)    # y will be 3
z = float(3)  # z will be 3.0

################

fruits = ["apple", "banana", "cherry"]
x, y, z = fruits
print(x)
print(y)
print(z)

################

x = 5
y = "John"
print(x, y)

################

x = "awesome"

def myfunc():
  global x
  x = "fantastic"

myfunc()

print("Python is " + x)

################################## Numbers

x = 1    # int
y = 2.8  # float
z = 1j   # complex

#convert from int to float:
a = float(x)

#convert from float to int:
b = int(y)

#convert from int to complex:
c = complex(x)

print(a)
print(b)
print(c)

print(type(a))
print(type(b))
print(type(c))


################################## Casting

z = int("3") # z will be 3
y = float(2.8)   # y will be 2.8
x = str("s1") # x will be 's1'


################################## Strings

b = "Hello, World!"  #slicing
print(b[2:5])

################ modify string

a = "Hello, World!"
b = a.split(",")
print(b)
print(a.replace("H", "J"))
print(a.strip()) # returns "Hello, World!"
print(a.lower())
print(a.upper())

################ Concatenate strings

a = "Hello"
b = "World"
c = a + " " + b
print(c)

################ using .format

quantity = 3
itemno = 567
price = 49.95
myorder = "I want to pay {2} dollars for {0} pieces of item {1}."
print(myorder.format(quantity, itemno, price))

################ using f

quantity = 3
itemno = 567
price = 49.95
print(f"I want to pay {price} dollars for {quantity} pieces of item {itemno}.")

################ Escape Characters

txt = "We are the so-called \"Vikings\" from the north."

#\'	Single Quote	
#\\	Backslash	
#\n	New Line	
#\r	Carriage Return	
#\t	Tab	
#\b	Backspace	
#\f	Form Feed	
#\ooo	Octal value	
#\xhh	Hex value	

################ String Methods

#capitalize()	Converts the first character to upper case
#casefold()	Converts string into lower case
#center()	Returns a centered string
#count()	Returns the number of times a specified value occurs in a string
#encode()	Returns an encoded version of the string
#endswith()	Returns true if the string ends with the specified value
#expandtabs()	Sets the tab size of the string
#find()		Searches the string for a specified value and returns the position of where it was found
#format()	Formats specified values in a string
#format_map()	Formats specified values in a string
#index()	Searches the string for a specified value and returns the position of where it was found
#isalnum()	Returns True if all characters in the string are alphanumeric
#isalpha()	Returns True if all characters in the string are in the alphabet
#isascii()	Returns True if all characters in the string are ascii characters
#isdecimal()	Returns True if all characters in the string are decimals
#isdigit()	Returns True if all characters in the string are digits
#isidentifier()	Returns True if the string is an identifier
#islower()	Returns True if all characters in the string are lower case
#isnumeric()	Returns True if all characters in the string are numeric
#isprintable()	Returns True if all characters in the string are printable
#isspace()	Returns True if all characters in the string are whitespaces
#istitle()	Returns True if the string follows the rules of a title
#isupper()	Returns True if all characters in the string are upper case
#join()		Joins the elements of an iterable to the end of the string
#ljust()	Returns a left justified version of the string
#lower()	Converts a string into lower case
#lstrip()	Returns a left trim version of the string
#maketrans()	Returns a translation table to be used in translations
#partition()	Returns a tuple where the string is parted into three parts
#replace()	Returns a string where a specified value is replaced with a specified value
#rfind()	Searches the string for a specified value and returns the last position of where it was found
#rindex()	Searches the string for a specified value and returns the last position of where it was found
#rjust()	Returns a right justified version of the string
#rpartition()	Returns a tuple where the string is parted into three parts
#rsplit()	Splits the string at the specified separator, and returns a list
#rstrip()	Returns a right trim version of the string
#split()	Splits the string at the specified separator, and returns a list
#splitlines()	Splits the string at line breaks and returns a list
#startswith()	Returns true if the string starts with the specified value
#strip()	Returns a trimmed version of the string
#swapcase()	Swaps cases, lower case becomes upper case and vice versa
#title()	Converts the first character of each word to upper case
#translate()	Returns a translated string
#upper()	Converts a string into upper case
#zfill()	Fills the string with a specified number of 0 values at the beginning

################################## Booleans

a = 200
b = 33

if b > a:
  print("b is greater than a")
else:
  print("b is not greater than a")

################ True

bool("abc")
bool(123)
bool(["apple", "cherry", "banana"])

################ via isinstance()

x = 200
print(isinstance(x, int))

################################## Opeartors

print((6 + 3) - (6 + 3))

#Python divides the operators in the following groups:

#Arithmetic operators
#Assignment operators
#Comparison operators
#Logical operators
#Identity operators
#Membership operators
#Bitwise operators

################################## Lists
################ Access, Change, Add

thislist = ["apple", "banana", "cherry", "apple", "cherry"]
thislist2 = ["apple", "banana", "cherry", "apple", "cherry"]
thislist3 = ["apple", "banana", "cherry", "apple", "cherry"]
list1 = ["apple", "banana", "cherry"]
list2 = [1, 5, 7, 9, 3]
list3 = [True, False, False]
list4 = ["abc", 34, True, 40, "male"]
print(thislist)
print(len(thislist))
print(type(list1))
print(type(list3))
print(type(list4))
print(thislist[1])
print(thislist[-1])
print(thislist[2:5])
if "apple" in thislist:
  print("Yes, 'apple' is in the fruits list")
thislist2[1] = "blackcurrant"
print(thislist2)
thislist3[1:3] = ["blackcurrant", "watermelon"]
print(thislist3)
thislist4 = ["apple", "banana", "cherry"]
thislist4.insert(2, "watermelon")
print(thislist4)
thislist4 = ["apple", "banana", "cherry"]
thislist4.append("orange")
print(thislist4)
thislist5 = ["apple", "banana", "cherry"]
thistuple = ("kiwi", "orange")
thislist5.extend(thistuple)
print(thislist5)
